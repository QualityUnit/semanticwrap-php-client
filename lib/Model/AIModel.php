<?php
/**
 * AIModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SEMANTIC WRAPPER API
 *
 * To answer any query about your data
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AIModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AIModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AIModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'embedding_class' => 'string',
        'embedding_model_name' => 'string',
        'augmenting_class' => 'string',
        'augmenting_model_name' => 'string',
        'embed_instruction' => 'string',
        'query_instruction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'embedding_class' => null,
        'embedding_model_name' => null,
        'augmenting_class' => null,
        'augmenting_model_name' => null,
        'embed_instruction' => null,
        'query_instruction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'embedding_class' => 'embedding_class',
        'embedding_model_name' => 'embedding_model_name',
        'augmenting_class' => 'augmenting_class',
        'augmenting_model_name' => 'augmenting_model_name',
        'embed_instruction' => 'embed_instruction',
        'query_instruction' => 'query_instruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'embedding_class' => 'setEmbeddingClass',
        'embedding_model_name' => 'setEmbeddingModelName',
        'augmenting_class' => 'setAugmentingClass',
        'augmenting_model_name' => 'setAugmentingModelName',
        'embed_instruction' => 'setEmbedInstruction',
        'query_instruction' => 'setQueryInstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'embedding_class' => 'getEmbeddingClass',
        'embedding_model_name' => 'getEmbeddingModelName',
        'augmenting_class' => 'getAugmentingClass',
        'augmenting_model_name' => 'getAugmentingModelName',
        'embed_instruction' => 'getEmbedInstruction',
        'query_instruction' => 'getQueryInstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['embedding_class'] = isset($data['embedding_class']) ? $data['embedding_class'] : null;
        $this->container['embedding_model_name'] = isset($data['embedding_model_name']) ? $data['embedding_model_name'] : null;
        $this->container['augmenting_class'] = isset($data['augmenting_class']) ? $data['augmenting_class'] : null;
        $this->container['augmenting_model_name'] = isset($data['augmenting_model_name']) ? $data['augmenting_model_name'] : null;
        $this->container['embed_instruction'] = isset($data['embed_instruction']) ? $data['embed_instruction'] : null;
        $this->container['query_instruction'] = isset($data['query_instruction']) ? $data['query_instruction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets embedding_class
     *
     * @return string
     */
    public function getEmbeddingClass()
    {
        return $this->container['embedding_class'];
    }

    /**
     * Sets embedding_class
     *
     * @param string $embedding_class The class of the embedding embedding_model
     *
     * @return $this
     */
    public function setEmbeddingClass($embedding_class)
    {
        $this->container['embedding_class'] = $embedding_class;

        return $this;
    }

    /**
     * Gets embedding_model_name
     *
     * @return string
     */
    public function getEmbeddingModelName()
    {
        return $this->container['embedding_model_name'];
    }

    /**
     * Sets embedding_model_name
     *
     * @param string $embedding_model_name The name of the embedding embedding_model
     *
     * @return $this
     */
    public function setEmbeddingModelName($embedding_model_name)
    {
        $this->container['embedding_model_name'] = $embedding_model_name;

        return $this;
    }

    /**
     * Gets augmenting_class
     *
     * @return string
     */
    public function getAugmentingClass()
    {
        return $this->container['augmenting_class'];
    }

    /**
     * Sets augmenting_class
     *
     * @param string $augmenting_class The class of the augmenting embedding_model
     *
     * @return $this
     */
    public function setAugmentingClass($augmenting_class)
    {
        $this->container['augmenting_class'] = $augmenting_class;

        return $this;
    }

    /**
     * Gets augmenting_model_name
     *
     * @return string
     */
    public function getAugmentingModelName()
    {
        return $this->container['augmenting_model_name'];
    }

    /**
     * Sets augmenting_model_name
     *
     * @param string $augmenting_model_name The name of the augmenting embedding_model
     *
     * @return $this
     */
    public function setAugmentingModelName($augmenting_model_name)
    {
        $this->container['augmenting_model_name'] = $augmenting_model_name;

        return $this;
    }

    /**
     * Gets embed_instruction
     *
     * @return string
     */
    public function getEmbedInstruction()
    {
        return $this->container['embed_instruction'];
    }

    /**
     * Sets embed_instruction
     *
     * @param string $embed_instruction The instruction for embedding
     *
     * @return $this
     */
    public function setEmbedInstruction($embed_instruction)
    {
        $this->container['embed_instruction'] = $embed_instruction;

        return $this;
    }

    /**
     * Gets query_instruction
     *
     * @return string
     */
    public function getQueryInstruction()
    {
        return $this->container['query_instruction'];
    }

    /**
     * Sets query_instruction
     *
     * @param string $query_instruction The instruction for querying
     *
     * @return $this
     */
    public function setQueryInstruction($query_instruction)
    {
        $this->container['query_instruction'] = $query_instruction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


