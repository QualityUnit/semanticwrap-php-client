<?php
/**
 * TimingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SEMANTIC WRAPPER API
 *
 * To answer any query about your data
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimingModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimingModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vector_timing' => 'int',
        'augment_timing' => 'int',
        'embedding_token_count' => 'int',
        'augmenting_token_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vector_timing' => null,
        'augment_timing' => null,
        'embedding_token_count' => null,
        'augmenting_token_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vector_timing' => 'vector_timing',
        'augment_timing' => 'augment_timing',
        'embedding_token_count' => 'embedding_token_count',
        'augmenting_token_count' => 'augmenting_token_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vector_timing' => 'setVectorTiming',
        'augment_timing' => 'setAugmentTiming',
        'embedding_token_count' => 'setEmbeddingTokenCount',
        'augmenting_token_count' => 'setAugmentingTokenCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vector_timing' => 'getVectorTiming',
        'augment_timing' => 'getAugmentTiming',
        'embedding_token_count' => 'getEmbeddingTokenCount',
        'augmenting_token_count' => 'getAugmentingTokenCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vector_timing'] = isset($data['vector_timing']) ? $data['vector_timing'] : null;
        $this->container['augment_timing'] = isset($data['augment_timing']) ? $data['augment_timing'] : null;
        $this->container['embedding_token_count'] = isset($data['embedding_token_count']) ? $data['embedding_token_count'] : null;
        $this->container['augmenting_token_count'] = isset($data['augmenting_token_count']) ? $data['augmenting_token_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vector_timing
     *
     * @return int
     */
    public function getVectorTiming()
    {
        return $this->container['vector_timing'];
    }

    /**
     * Sets vector_timing
     *
     * @param int $vector_timing The time taken to search the vector store
     *
     * @return $this
     */
    public function setVectorTiming($vector_timing)
    {
        $this->container['vector_timing'] = $vector_timing;

        return $this;
    }

    /**
     * Gets augment_timing
     *
     * @return int
     */
    public function getAugmentTiming()
    {
        return $this->container['augment_timing'];
    }

    /**
     * Sets augment_timing
     *
     * @param int $augment_timing The time taken to augment the results
     *
     * @return $this
     */
    public function setAugmentTiming($augment_timing)
    {
        $this->container['augment_timing'] = $augment_timing;

        return $this;
    }

    /**
     * Gets embedding_token_count
     *
     * @return int
     */
    public function getEmbeddingTokenCount()
    {
        return $this->container['embedding_token_count'];
    }

    /**
     * Sets embedding_token_count
     *
     * @param int $embedding_token_count The number of tokens in the embedding
     *
     * @return $this
     */
    public function setEmbeddingTokenCount($embedding_token_count)
    {
        $this->container['embedding_token_count'] = $embedding_token_count;

        return $this;
    }

    /**
     * Gets augmenting_token_count
     *
     * @return int
     */
    public function getAugmentingTokenCount()
    {
        return $this->container['augmenting_token_count'];
    }

    /**
     * Sets augmenting_token_count
     *
     * @param int $augmenting_token_count The number of tokens in the augmenting text
     *
     * @return $this
     */
    public function setAugmentingTokenCount($augmenting_token_count)
    {
        $this->container['augmenting_token_count'] = $augmenting_token_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


